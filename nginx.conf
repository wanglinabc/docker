user nginx;
worker_processes auto;


pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}


http {

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';


  include mime.types;
  default_type application/octet-stream;
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  #Gzip Compression
  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
    text/javascript application/javascript application/x-javascript
    text/x-json application/json application/x-web-app-manifest+json
    text/css text/plain text/x-component
    font/opentype application/x-font-ttf application/vnd.ms-fontobject
    image/x-icon;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  #If you have a lot of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;


  server {
    listen 80 ;
    server_name  _;
    root /var/www/src/public;
    autoindex off;
    index index.html index.htm;
    access_log /var/log/nginx/access.log main;
    location / {
            index  index.php index.html index.htm;
             #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则
             if (!-e $request_filename)
             {
                #地址作为将参数rewrite到index.php上。
                rewrite ^/(.*)$ /index.php?s=$1;
                #若是子目录则使用下面这句，将subdir改成目录名称即可。
                #rewrite ^/subdir/(.*)$ /subdir/index.php?s=$1;
             }
        }

   location ~ \.php {
               include fastcgi.conf;
               include        fastcgi_params;
               fastcgi_index  index.php;
               fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;
               fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
               fastcgi_param  PATH_INFO  $fastcgi_path_info;
               fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;

               #include fastcgi_params;
               ##pathinfo支持start
               #定义变量 $path_info ，用于存放pathinfo信息
              # set $path_info "";
               #定义变量 $real_script_name，用于存放真实地址
             #  set $real_script_name $fastcgi_script_name;
               #如果地址与引号内的正则表达式匹配
             #  if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
                       #将文件地址赋值给变量 $real_script_name
             #          set $real_script_name $1;
                       #将文件地址后的参数赋值给变量 $path_info
               #        set $path_info $2;
           #    }
               #配置fastcgi的一些参数
            #   fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;
             #  fastcgi_param SCRIPT_NAME $real_script_name;
           #    fastcgi_param PATH_INFO $path_info;
               ###pathinfo支持end
        #   fastcgi_intercept_errors on;
           fastcgi_pass  php-zixun:9000;
       }
  }

########################## vhost #############################
  include vhost/*.conf;
}
